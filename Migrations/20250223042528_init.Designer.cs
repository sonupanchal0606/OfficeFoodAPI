// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OfficeFoodAPI.Data;
using OfficeFoodAPI.Model;

#nullable disable

namespace OfficeFoodAPI.Migrations
{
    [DbContext(typeof(FoodDbContext))]
    [Migration("20250223042528_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OfficeFoodAPI.Model.Company", b =>
                {
                    b.Property<Guid>("companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("companyname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("subsidyperplate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("upatedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("vendorid")
                        .HasColumnType("uuid");

                    b.HasKey("companyid");

                    b.HasIndex("vendorid");

                    b.ToTable("company_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.EmployeeOrderHistory", b =>
                {
                    b.Property<Guid>("employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("companyid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("day1")
                        .HasColumnType("integer");

                    b.Property<int>("day10")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day10logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day11")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day11logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day12")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day12logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day13")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day13logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day14")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day14logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day15")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day15logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day16")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day16logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day17")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day17logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day18")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day18logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day19")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day19logs")
                        .HasColumnType("jsonb");

                    b.Property<List<Log>>("day1logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day2")
                        .HasColumnType("integer");

                    b.Property<int>("day20")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day20logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day21")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day21logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day22")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day22logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day23")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day23logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day24")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day24logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day25")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day25logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day26")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day26logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day27")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day27logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day28")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day28logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day29")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day29logs")
                        .HasColumnType("jsonb");

                    b.Property<List<Log>>("day2logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day3")
                        .HasColumnType("integer");

                    b.Property<int>("day30")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day30logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day31")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day31logs")
                        .HasColumnType("jsonb");

                    b.Property<List<Log>>("day3logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day4")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day4logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day5")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day5logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day6")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day6logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day7")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day7logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day8")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day8logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("day9")
                        .HasColumnType("integer");

                    b.Property<List<Log>>("day9logs")
                        .HasColumnType("jsonb");

                    b.Property<int>("month")
                        .HasColumnType("integer");

                    b.Property<DateTime>("upatedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("employeeid");

                    b.HasIndex("companyid");

                    b.HasIndex("userid");

                    b.ToTable("employee_history_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.MenuItem", b =>
                {
                    b.Property<Guid>("menuitemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("itemname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("updatedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("vendorid")
                        .HasColumnType("uuid");

                    b.HasKey("menuitemid");

                    b.HasIndex("vendorid");

                    b.ToTable("menuitem_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.User", b =>
                {
                    b.Property<Guid>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("companyid")
                        .HasColumnType("uuid");

                    b.Property<Point>("coordinate")
                        .HasColumnType("geometry(Point, 4326)");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("upatedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("usertypeid")
                        .HasColumnType("uuid");

                    b.HasKey("userid");

                    b.HasIndex("companyid");

                    b.HasIndex("usertypeid");

                    b.ToTable("user_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.UserAuth", b =>
                {
                    b.Property<Guid>("userauthid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("refreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("refreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userid")
                        .HasColumnType("uuid");

                    b.HasKey("userauthid");

                    b.HasIndex("userid");

                    b.ToTable("userauth_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.UserType", b =>
                {
                    b.Property<Guid>("usertypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("permission")
                        .HasColumnType("integer");

                    b.Property<DateTime>("upatedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("usertype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("usertypeid");

                    b.ToTable("usertype_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.Vendor", b =>
                {
                    b.Property<Guid>("vendorid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("serviceareas")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("upatedat")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("vendorid");

                    b.ToTable("vendor_mstr");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.Company", b =>
                {
                    b.HasOne("OfficeFoodAPI.Model.Vendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorid");

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.EmployeeOrderHistory", b =>
                {
                    b.HasOne("OfficeFoodAPI.Model.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeFoodAPI.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.MenuItem", b =>
                {
                    b.HasOne("OfficeFoodAPI.Model.Vendor", "vendor")
                        .WithMany("menu_item")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.User", b =>
                {
                    b.HasOne("OfficeFoodAPI.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeFoodAPI.Model.UserType", "usertype")
                        .WithMany()
                        .HasForeignKey("usertypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("usertype");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.UserAuth", b =>
                {
                    b.HasOne("OfficeFoodAPI.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("OfficeFoodAPI.Model.Vendor", b =>
                {
                    b.Navigation("menu_item");
                });
#pragma warning restore 612, 618
        }
    }
}
